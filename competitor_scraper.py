"""
Rakip Fiyat Takip Mod√ºl√º - Web Scraping
Selenium ile Trendyol sayfalarƒ±ndan √ºr√ºn bilgilerini √ßeker
YENƒ∞: Slot 0 (Ne≈üeli√ái√ßekler) desteƒüi eklendi
G√úNCELLEME: Selenium ile JavaScript render desteƒüi
"""

import time
import random
import logging
import threading
import re
from typing import Dict, Optional, List
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException

from competitor_tracking import (
    save_scraped_price, 
    get_all_active_links,
    get_links_by_barcode
)

# Scraping ayarlarƒ±
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36'
]

REQUEST_DELAY_MIN = 2  # Minimum bekleme s√ºresi (saniye)
REQUEST_DELAY_MAX = 5  # Maximum bekleme s√ºresi (saniye)
REQUEST_TIMEOUT = 15   # ƒ∞stek timeout s√ºresi (saniye)

# YENƒ∞: Slot 0 i√ßin √∂zel ayarlar
NESELICICEKLER_DELAY_MIN = 3  # Ne≈üeli√ái√ßekler i√ßin daha uzun bekleme
NESELICICEKLER_DELAY_MAX = 7

# Global scraping durumu
scraping_status = {
    'is_running': False,
    'current_progress': 0,
    'total_items': 0,
    'current_item': '',
    'started_by': '',
    'start_time': None,
    'errors': [],
    'include_slot_0': False,  # YENƒ∞: Slot 0 dahil mi?
    'slot_0_processed': 0,    # YENƒ∞: Slot 0 i≈ülem sayƒ±sƒ±
    'competitor_processed': 0  # YENƒ∞: Rakip slot i≈ülem sayƒ±sƒ±
}

scraping_lock = threading.Lock()

def setup_chrome_driver() -> webdriver.Chrome:
    """Chrome WebDriver'ƒ± headless modda kuruluma hazƒ±rlar"""
    print(f"üîç COMPETITOR DEBUG: Chrome driver kuruluyor...")
    
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument(f'--user-agent={random.choice(USER_AGENTS)}')
    
    print(f"üîç COMPETITOR DEBUG: Chrome options ayarlandƒ± (headless mode)")
    
    try:
        # Manuel path kullan
        service = Service('/usr/bin/chromedriver')
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        print(f"‚úÖ COMPETITOR DEBUG: Chrome driver ba≈üarƒ±yla kuruldu")
        return driver
    except Exception as e:
        print(f"‚ùå COMPETITOR DEBUG: Chrome driver kurulum hatasƒ±: {str(e)}")
        logging.error(f"COMPETITOR DEBUG: Chrome driver hatasƒ±: {str(e)}")
        raise

def scrape_trendyol_product(url: str, slot_number: int = 1) -> Optional[Dict[str, str]]:
    """
    Selenium ile Trendyol √ºr√ºn sayfasƒ±ndan bilgileri √ßeker
    YENƒ∞: slot_number parametresi eklendi (slot 0 i√ßin √∂zel i≈ülemler)
    Returns: {'product_name': str, 'price': float, 'seller_name': str} or None
    """
    driver = None
    try:
        driver = setup_chrome_driver()
        
        # YENƒ∞: Slot 0 i√ßin daha uzun bekleme
        if slot_number == 0:
            delay = random.uniform(NESELICICEKLER_DELAY_MIN, NESELICICEKLER_DELAY_MAX)
            logging.info(f"Ne≈üeli√ái√ßekler slot scraping (daha uzun bekleme): {delay:.1f}s")
        else:
            delay = random.uniform(REQUEST_DELAY_MIN, REQUEST_DELAY_MAX)
        
        time.sleep(delay)
        
        print(f"üîç COMPETITOR DEBUG: Sayfaya gidiliyor: {url}")
        driver.get(url)
        
        # Sayfa y√ºklenene kadar bekle
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # JavaScript'in tam y√ºklenmesi i√ßin bekleme
        time.sleep(5)
        
        # Sayfayƒ± a≈üaƒüƒ± kaydƒ±r (lazy loading i√ßin)
        driver.execute_script("window.scrollTo(0, 1000);")
        time.sleep(2)
        driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(2)
        
        result = {
            'product_name': None,
            'price': None,
            'seller_name': None
        }
        
        # √úr√ºn adƒ±nƒ± √ßek - TAM BA≈ûLIK
        product_name = None
        name_selectors = [
            'h1[data-testid="product-title"]',  # Sizin bulduƒüunuz - tam ba≈ülƒ±k
            'h1.product-title',
            'h1.pr-new-br',  # T√ºm h1, sadece span deƒüil
            'h1',  # Genel h1
            '.product-name h1',
            '.pr-new-br',
            'h1[data-testid="product-name"]',
            '.product-title'
        ]
        
        for selector in name_selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.text.strip():
                    product_name = element.text.strip()
                    
                    # YENƒ∞: Slot 0 i√ßin √∂zel loglama
                    if slot_number == 0:
                        logging.info(f"Ne≈üeli√ái√ßekler √ºr√ºn adƒ± bulundu - Selector: {selector}, Deƒüer: {product_name[:100]}...")
                    else:
                        logging.info(f"√úr√ºn adƒ± bulundu - Selector: {selector}, Deƒüer: {product_name[:100]}...")
                    break
            except:
                continue
        
        result['product_name'] = product_name
        
        # Fiyatƒ± √ßek - Product_scraper.py ile aynƒ± mantƒ±k
        price = None
        
        print(f"üîç COMPETITOR DEBUG: Price selector aramasƒ± ba≈ülƒ±yor... (Slot {slot_number})")
        
        # JavaScript'in y√ºklenmesi i√ßin ekstra bekleme
        print(f"üîç COMPETITOR DEBUG: JavaScript y√ºklenmesi i√ßin 3 saniye bekleniyor...")
        time.sleep(3)
        
        # Sayfayƒ± yeniden scroll et (lazy loading i√ßin)
        driver.execute_script("window.scrollTo(0, 600);")
        time.sleep(1)
        driver.execute_script("window.scrollTo(0, 300);")
        time.sleep(1)
        
        price_selectors = [
            # YENƒ∞: ƒ∞ndirimli fiyat √∂nceliƒüi (product_scraper.py ile uyumlu)
            '.price-view-discounted',            # ƒ∞ndirimli fiyat (611 TL)
            '[data-testid="price"] .price-view-discounted', # Daha spesifik indirimli
            '.price-view span:last-child',       # Price-view i√ßindeki son span
            
            # YENƒ∞: Kampanya fiyatlarƒ±
            '.campaign-price .new-price',        # Kampanyalƒ± fiyat i√ßin
            '.campaign-price-content .new-price', # Spesifik kampanya fiyatƒ±
            'p.new-price',                       # p tag ile new-price
            '.campaign-price p.new-price',       # Campaign i√ßi new-price
            
            # ESKƒ∞: Mevcut selector'lar (korundu)
            '.prc-dsc',
            '.prc-slg',
            '.product-price .prc-dsc',
            
            # YENƒ∞: Ek selector'lar
            '[data-testid="price-current-price"]', # Test ID ile
            '.price-current',                    # Mevcut fiyat
            'span[class*="price"]',              # Price i√ßeren span
            '.prc-cntr .prc-dsc',               # Price container i√ßi
            '.price-container span',             # Price container span
            'div[class*="price"] span',          # Price div i√ßi span
            '.product-price span:last-child',    # Son span
            'span[data-testid*="price"]',        # Price test ID'li span
            
            # YENƒ∞: Genel selector'lar
            '*[class*="price"]:not(:empty)',     # Price i√ßeren bo≈ü olmayan elementler
            '*[class*="prc"]:not(:empty)',       # Prc i√ßeren bo≈ü olmayan elementler
            
            # ESKƒ∞: Eski container (korundu)
            '.product-price-container .prc-dsc',
            
            # YENƒ∞: Sayfa kaynak kodunda arama (fallback)
            'body'  # Fallback: t√ºm sayfa i√ßeriƒüi
        ]
        
        price_found = False
        for i, selector in enumerate(price_selectors):
            print(f"üîç COMPETITOR DEBUG: Price selector {i+1}/{len(price_selectors)} deneniyor: {selector} (Slot {slot_number})")
            
            # Son selector (body) i√ßin √∂zel i≈ülem - Sayfa kaynaƒüƒ±nda regex arama
            if selector == 'body':
                try:
                    print(f"üîç COMPETITOR DEBUG: Fallback: Sayfa kaynak kodunda fiyat aranƒ±yor...")
                    page_source = driver.page_source
                    
                    # Sayfa kaynaƒüƒ±nda fiyat pattern'lerini ara
                    price_patterns = [
                        r'([0-9]{1,3}(?:\.[0-9]{3})*(?:,[0-9]{2})?)\s*TL',  # 2.959 TL, 2.959,50 TL
                        r'([0-9]{1,3}(?:\.[0-9]{3})*)\s*‚Ç∫',                 # 2.959 ‚Ç∫
                        r'"price"[^0-9]*([0-9]{1,6}(?:\.[0-9]{2})?)',       # JSON price field
                        r'price[^0-9]*([0-9]{1,6}(?:\.[0-9]{2})?)',         # price: 2959
                        r'fiyat[^0-9]*([0-9]{1,6}(?:\.[0-9]{2})?)',         # fiyat: 2959
                    ]
                    
                    for pattern in price_patterns:
                        matches = re.findall(pattern, page_source, re.IGNORECASE)
                        if matches:
                            for match in matches:
                                try:
                                    # Binlik ayracƒ±nƒ± kaldƒ±r ve float'a √ßevir
                                    price_text = match.replace('.', '').replace(',', '.')
                                    price_value = float(price_text)
                                    
                                    # Mantƒ±klƒ± fiyat aralƒ±ƒüƒ±nda mƒ± kontrol et (10-1000000 TL)
                                    if 10 <= price_value <= 1000000:
                                        price = price_value
                                        print(f"‚úÖ COMPETITOR DEBUG: Fƒ∞YAT SAYFA KAYNAƒûINDA BULUNDU! (Slot {slot_number})")
                                        print(f"‚úÖ COMPETITOR DEBUG: Pattern: {pattern}")
                                        print(f"‚úÖ COMPETITOR DEBUG: Match: {match} -> {price_value}")
                                        price_found = True
                                        break
                                except ValueError:
                                    continue
                            if price_found:
                                break
                    
                    if not price_found:
                        print(f"‚ùå COMPETITOR DEBUG: Sayfa kaynaƒüƒ±nda fiyat bulunamadƒ± (Slot {slot_number})")
                        
                except Exception as e:
                    print(f"‚ùå COMPETITOR DEBUG: Sayfa kaynaƒüƒ± analiz hatasƒ±: {str(e)} (Slot {slot_number})")
                
                break  # body selector'ƒ± son, d√∂ng√ºy√º sonlandƒ±r
            
            # Normal selector'lar i√ßin
            try:
                # Element bulana kadar bekle (max 5 saniye)
                try:
                    element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    print(f"‚úÖ COMPETITOR DEBUG: Element WebDriverWait ile bulundu! (Slot {slot_number})")
                except:
                    # WebDriverWait ba≈üarƒ±sƒ±z olursa normal find_element dene
                    element = driver.find_element(By.CSS_SELECTOR, selector)
                    print(f"‚úÖ COMPETITOR DEBUG: Element find_element ile bulundu! (Slot {slot_number})")
                
                # Text alma ve bo≈üluk kontrol√º
                price_text = element.text.strip()
                
                # Text bo≈üsa alternative attribute'larƒ± dene
                if not price_text:
                    alternative_attributes = ['textContent', 'innerText', 'value', 'data-price', 'title']
                    for attr in alternative_attributes:
                        try:
                            attr_value = element.get_attribute(attr)
                            if attr_value and attr_value.strip():
                                price_text = attr_value.strip()
                                print(f"üîç COMPETITOR DEBUG: Text '{attr}' attribute'unda bulundu: '{price_text}' (Slot {slot_number})")
                                break
                        except:
                            continue
                
                print(f"üîç COMPETITOR DEBUG: Element text: '{price_text}' (Slot {slot_number})")
                
                if not price_text:
                    print(f"‚ö†Ô∏è COMPETITOR DEBUG: Element bo≈ü text d√∂nd√ºrd√º (Slot {slot_number})")
                    continue
                
                # Geli≈ümi≈ü fiyat temizleme - product_scraper.py ile aynƒ± mantƒ±k
                if price_text:
                    print(f"üîß COMPETITOR DEBUG: Fiyat temizleme ba≈ülƒ±yor... (Slot {slot_number})")
                    
                    # Sadece rakam, nokta, virg√ºl ve bo≈üluk karakterlerini al
                    price_clean = re.sub(r'[^\d\s,.]', '', price_text)
                    print(f"üîß COMPETITOR DEBUG: ƒ∞lk temizlik sonrasƒ±: '{price_clean}' (Slot {slot_number})")
                    
                    original_clean = price_clean
                    
                    # Noktayƒ± binlik ayracƒ± olarak kabul et, virg√ºl√º ondalƒ±k ayracƒ± olarak
                    if ',' in price_clean and '.' in price_clean:
                        # Her ikisi varsa: nokta binlik, virg√ºl ondalƒ±k
                        print(f"üîß COMPETITOR DEBUG: Hem nokta hem virg√ºl var - nokta binlik, virg√ºl ondalƒ±k kabul ediliyor (Slot {slot_number})")
                        price_clean = price_clean.replace('.', '').replace(',', '.')
                        print(f"üîß COMPETITOR DEBUG: D√∂n√º≈ü√ºm sonrasƒ±: '{price_clean}' (Slot {slot_number})")
                    

                    elif '.' in price_clean:
                        # Sadece nokta varsa kontrol et
                        parts = price_clean.split('.')
                        last_part_clean = parts[1].strip() if len(parts) > 1 else ""
                        print(f"üîß COMPETITOR DEBUG: Sadece nokta var, par√ßalar: {parts}, son kƒ±sƒ±m temiz: '{last_part_clean}' (Slot {slot_number})")
                        
                        if len(parts) == 2 and len(last_part_clean) == 3 and last_part_clean.isdigit():
                            # 3 haneli rakam = binlik ayracƒ±
                            print(f"üîß COMPETITOR DEBUG: Son kƒ±sƒ±m 3 haneli rakam ({last_part_clean}) - binlik ayracƒ± (Slot {slot_number})")
                            price_clean = price_clean.replace('.', '').replace(' ', '')
                            print(f"üîß COMPETITOR DEBUG: Binlik ayracƒ± kaldƒ±rƒ±ldƒ±: '{price_clean}' (Slot {slot_number})")
                        else:
                            print(f"üîß COMPETITOR DEBUG: Son kƒ±sƒ±m {len(last_part_clean) if len(parts) > 1 else 0} haneli - ondalƒ±k ayracƒ± olarak bƒ±rakƒ±lƒ±yor (Slot {slot_number})")
                    

                    elif ',' in price_clean:
                        # Sadece virg√ºl varsa: ondalƒ±k ayracƒ± olarak kabul et
                        print(f"üîß COMPETITOR DEBUG: Sadece virg√ºl var - ondalƒ±k ayracƒ± olarak kabul ediliyor (Slot {slot_number})")
                        price_clean = price_clean.replace(',', '.')
                        print(f"üîß COMPETITOR DEBUG: Virg√ºl nokta ile deƒüi≈ütirildi: '{price_clean}' (Slot {slot_number})")
                    else:
                        print(f"üîß COMPETITOR DEBUG: Ayra√ß yok, olduƒüu gibi bƒ±rakƒ±lƒ±yor (Slot {slot_number})")
                    
                    # Bo≈üluklarƒ± temizle
                    price_clean = price_clean.replace(' ', '')
                    print(f"üîß COMPETITOR DEBUG: Bo≈üluklar temizlendi: '{price_clean}' (Slot {slot_number})")
                    
                    if price_clean:
                        try:
                            parsed_price = float(price_clean)
                            
                            # Mantƒ±klƒ± fiyat aralƒ±ƒüƒ±nda mƒ± kontrol et
                            if 10 <= parsed_price <= 1000000:
                                price = parsed_price
                                print(f"‚úÖ COMPETITOR DEBUG: Fƒ∞YAT BA≈ûARIYLA PARSE EDƒ∞LDƒ∞! (Slot {slot_number})")
                                print(f"‚úÖ COMPETITOR DEBUG: Kullanƒ±lan selector: '{selector}' (Slot {slot_number})")
                                print(f"‚úÖ COMPETITOR DEBUG: Ham text: '{price_text}' (Slot {slot_number})")
                                print(f"‚úÖ COMPETITOR DEBUG: Temizlenmi≈ü text: '{original_clean}' -> '{price_clean}' (Slot {slot_number})")
                                print(f"‚úÖ COMPETITOR DEBUG: Final fiyat: {parsed_price} (Slot {slot_number})")
                                
                                # YENƒ∞: Slot 0 i√ßin √∂zel loglama
                                if slot_number == 0:
                                    logging.info(f"Ne≈üeli√ái√ßekler fiyat bulundu: {parsed_price}‚Ç∫")
                                else:
                                    logging.info(f"Fiyat bulundu: {parsed_price}‚Ç∫")
                                
                                price_found = True
                                break
                            else:
                                print(f"‚ö†Ô∏è COMPETITOR DEBUG: Fiyat mantƒ±ksƒ±z aralƒ±kta ({parsed_price}), atlanƒ±yor (Slot {slot_number})")
                                continue
                                
                        except ValueError as ve:
                            print(f"‚ùå COMPETITOR DEBUG: Float d√∂n√º≈ü√ºm hatasƒ±: {str(ve)} (Slot {slot_number})")
                            print(f"‚ùå COMPETITOR DEBUG: Text: '{price_text}' -> Clean: '{price_clean}' (Slot {slot_number})")
                            continue
                
            except Exception as e:
                print(f"‚ùå COMPETITOR DEBUG: Selector hatasƒ±: {str(e)} (Slot {slot_number})")
                continue
        
        if not price_found:
            print(f"‚ùå COMPETITOR DEBUG: Hƒ∞√áBƒ∞R Y√ñNTEMƒ∞LE Fƒ∞YAT ALINAMADI! (Slot {slot_number})")
            print(f"‚ùå COMPETITOR DEBUG: Toplam {len(price_selectors)} y√∂ntem denendi (Slot {slot_number})")
            print(f"‚ùå COMPETITOR DEBUG: Final result price: {price} (Slot {slot_number})")
        else:
            print(f"üéâ COMPETITOR DEBUG: Fƒ∞YAT BA≈ûARIYLA BELƒ∞RLENDƒ∞: {price} (Slot {slot_number})")
        
        result['price'] = price
        
        # Satƒ±cƒ± adƒ±nƒ± √ßek - Selenium ile
        seller_name = None
        
        seller_selectors = [
            '.product-description-market-place',  # Debug'da bulduƒüumuz doƒüru selector!
            'span.product-description-market-place',  # Daha spesifik
            '.merchant-name',  # Yedek
            'div[class*="merchant-name"]',  
            '[class*="merchant-name"]',  
            '.seller-name', 
            '.product-merchant a',
            '.pdp-merchant-info a',
            '[data-testid="merchant-name"]',
            '.merchant-info .merchant-name'
        ]
        
        for selector in seller_selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.text.strip():
                    seller_name = element.text.strip()
                    
                    # YENƒ∞: Slot 0 i√ßin √∂zel loglama
                    if slot_number == 0:
                        logging.info(f"Ne≈üeli√ái√ßekler satƒ±cƒ± bulundu - Selector: {selector}, Deƒüer: {seller_name}")
                    else:
                        logging.info(f"Satƒ±cƒ± bulundu - Selector: {selector}, Deƒüer: {seller_name}")
                    break
            except:
                continue
        
        # YENƒ∞: Slot 0 i√ßin Ne≈üeli√ái√ßekler kontrol√º
        if slot_number == 0:
            # Ne≈üeli√ái√ßekler text'ini direkt ara
            try:
                neseli_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'Ne≈üeli√ái√ßekler')]")
                if neseli_elements:
                    seller_name = neseli_elements[0].text.strip()
                    logging.info(f"Ne≈üeli√ái√ßekler XPath ile bulundu: {seller_name}")
                elif not seller_name:
                    # Slot 0 ise ve satƒ±cƒ± bulunamazsa Ne≈üeli√ái√ßekler olarak varsay
                    seller_name = "Ne≈üeli√ái√ßekler"
                    logging.info(f"Slot 0 i√ßin varsayƒ±lan satƒ±cƒ±: {seller_name}")
            except:
                if not seller_name:
                    seller_name = "Ne≈üeli√ái√ßekler"
        else:
            # Rakip √ºr√ºnler i√ßin CenNetHome kontrol√º
            try:
                cennet_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'CenNetHome')]")
                if cennet_elements:
                    seller_name = cennet_elements[0].text.strip()
                    logging.info(f"CenNetHome XPath ile bulundu: {seller_name}")
            except:
                pass
        
        # Eƒüer satƒ±cƒ± hala bulunamazsa
        if not seller_name:
            if slot_number == 0:
                logging.warning(f"Ne≈üeli√ái√ßekler satƒ±cƒ± bulunamadƒ± - URL: {url}")
                seller_name = "Ne≈üeli√ái√ßekler"  # Varsayƒ±lan
            else:
                logging.warning(f"Satƒ±cƒ± bulunamadƒ± - URL: {url}")
                seller_name = "Bilinmiyor"
        
        result['seller_name'] = seller_name
        
        # Sonu√ßlarƒ± kontrol et
        if result['product_name'] and result['price'] is not None:
            return {
                'product_name': result['product_name'][:200],  # Uzunluk sƒ±nƒ±rƒ±
                'price': result['price'],
                'seller_name': result['seller_name'][:100] if result['seller_name'] else ("Ne≈üeli√ái√ßekler" if slot_number == 0 else "Bilinmiyor")
            }
        else:
            slot_info = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Slot {slot_number}"
            logging.warning(f"Eksik veri - {slot_info} - URL: {url}, Name: {result['product_name']}, Price: {result['price']}, Seller: {result['seller_name']}")
            return None
            
    except Exception as e:
        slot_info = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Slot {slot_number}"
        logging.error(f"Selenium scraping hatasƒ± - {slot_info} - {url}: {str(e)}")
        return None
    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass

def update_scraping_status(is_running: bool = None, progress: int = None, 
                          total: int = None, current_item: str = None,
                          started_by: str = None, error: str = None,
                          include_slot_0: bool = None, 
                          slot_0_processed: int = None,
                          competitor_processed: int = None):
    """
    Scraping durumunu g√ºnceller
    YENƒ∞: Slot 0 istatistikleri eklendi
    """
    global scraping_status
    
    with scraping_lock:
        if is_running is not None:
            scraping_status['is_running'] = is_running
            if is_running:
                scraping_status['start_time'] = time.time()
                scraping_status['errors'] = []
                scraping_status['slot_0_processed'] = 0
                scraping_status['competitor_processed'] = 0
            
        if progress is not None:
            scraping_status['current_progress'] = progress
            
        if total is not None:
            scraping_status['total_items'] = total
            
        if current_item is not None:
            scraping_status['current_item'] = current_item
            
        if started_by is not None:
            scraping_status['started_by'] = started_by
            
        if error is not None:
            scraping_status['errors'].append(error)
            
        if include_slot_0 is not None:
            scraping_status['include_slot_0'] = include_slot_0
            
        if slot_0_processed is not None:
            scraping_status['slot_0_processed'] = slot_0_processed
            
        if competitor_processed is not None:
            scraping_status['competitor_processed'] = competitor_processed

def get_update_status() -> Dict:
    """
    Mevcut scraping durumunu d√∂nd√ºr√ºr
    YENƒ∞: Slot 0 istatistikleri dahil
    """
    with scraping_lock:
        status = scraping_status.copy()
        if status['start_time']:
            status['elapsed_time'] = time.time() - status['start_time']
        else:
            status['elapsed_time'] = 0
        return status

def scrape_single_link(barcode: str, slot_number: int, url: str, scraped_by: str) -> bool:
    """
    Tek bir link i√ßin scraping yapar
    YENƒ∞: slot_number 0 desteƒüi - D√úZELTME: scrape_source parametresi kaldƒ±rƒ±ldƒ±
    """
    try:
        slot_info = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Rakip Slot {slot_number}"
        logging.info(f"Scraping ba≈ülatƒ±lƒ±yor: {barcode} - {slot_info} - {url}")
        
        product_data = scrape_trendyol_product(url, slot_number)
        
        if product_data:
            success = save_scraped_price(
                barcode=barcode,
                competitor_url=url,
                slot_number=slot_number,
                product_name=product_data['product_name'],
                price=product_data['price'],
                seller_name=product_data['seller_name'],
                scraped_by=scraped_by
            )
            
            if success:
                logging.info(f"Scraping ba≈üarƒ±lƒ±: {barcode} - {slot_info} - {product_data['price']}‚Ç∫")
                return True
            else:
                logging.error(f"Veri kaydetme hatasƒ±: {barcode} - {slot_info} - {url}")
                return False
        else:
            logging.warning(f"Scraping ba≈üarƒ±sƒ±z: {barcode} - {slot_info} - {url}")
            return False
            
    except Exception as e:
        slot_info = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Rakip Slot {slot_number}"
        logging.error(f"Scraping exception: {barcode} - {slot_info} - {url} - {str(e)}")
        return False

def start_scraping_for_new_links(barcode: str, links: List[str], scraped_by: str):
    """
    Yeni kaydedilen linkler i√ßin scraping ba≈ülatƒ±r (ESKƒ∞ FONKSƒ∞YON - Sadece slot 1-5)
    Arka planda √ßalƒ±≈üƒ±r
    """
    def scrape_worker():
        try:
            active_links = get_links_by_barcode(barcode, include_slot_0=False)
            link_dict = {link['slot_number']: link['url'] for link in active_links}
            
            for slot_number, url in enumerate(links, 1):
                if url.strip() and slot_number in link_dict:
                    if link_dict[slot_number] == url.strip():
                        scrape_single_link(barcode, slot_number, url.strip(), scraped_by)
                        
        except Exception as e:
            logging.error(f"Yeni link scraping hatasƒ±: {str(e)}")
    
    # Arka planda √ßalƒ±≈ütƒ±r
    thread = threading.Thread(target=scrape_worker)
    thread.daemon = True
    thread.start()

def start_scraping_for_new_links_by_slots(barcode: str, slot_links: Dict[int, str], scraped_by: str):
    """
    YENƒ∞: Slot numaralarƒ± ile yeni kaydedilen linkler i√ßin scraping ba≈ülatƒ±r
    slot_links: {slot_number: url}
    """
    def scrape_worker():
        try:
            for slot_number, url in slot_links.items():
                if url and url.strip():
                    scrape_single_link(barcode, slot_number, url.strip(), scraped_by)
                    
                    # Slot 0 i√ßin daha uzun bekleme
                    if slot_number == 0:
                        time.sleep(random.uniform(NESELICICEKLER_DELAY_MIN, NESELICICEKLER_DELAY_MAX))
                    else:
                        time.sleep(random.uniform(REQUEST_DELAY_MIN, REQUEST_DELAY_MAX))
                        
        except Exception as e:
            logging.error(f"Yeni slot link scraping hatasƒ±: {str(e)}")
    
    # Arka planda √ßalƒ±≈ütƒ±r
    thread = threading.Thread(target=scrape_worker)
    thread.daemon = True
    thread.start()

def start_manual_update(username: str):
    """
    Manuel g√ºncelleme ba≈ülatƒ±r - ESKƒ∞ FONKSƒ∞YON (Sadece slot 1-5)
    T√ºm aktif linkler i√ßin scraping yapar
    """
    return start_manual_update_with_slot_0(username, include_slot_0=False)

def start_manual_update_with_slot_0(username: str, include_slot_0: bool = True):
    """
    YENƒ∞: Manuel g√ºncelleme ba≈ülatƒ±r (Slot 0 dahil edilebilir)
    """
    def manual_update_worker():
        try:
            update_scraping_status(is_running=True, started_by=username, include_slot_0=include_slot_0)
            
            # T√ºm aktif linkleri al
            all_links = get_all_active_links(include_slot_0=include_slot_0)
            total_links = len(all_links)
            
            update_scraping_status(total=total_links, progress=0)
            
            slot_info = "Slot 0-5" if include_slot_0 else "Slot 1-5"
            logging.info(f"Manuel g√ºncelleme ba≈ülatƒ±ldƒ±: {total_links} link ({slot_info})")
            
            success_count = 0
            slot_0_count = 0
            competitor_count = 0
            
            for i, link_data in enumerate(all_links):
                barcode = link_data['barcode']
                slot_number = link_data['slot_number']
                url = link_data['url']
                
                # Durumu g√ºncelle
                slot_display = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Rakip Slot {slot_number}"
                update_scraping_status(
                    progress=i + 1,
                    current_item=f"{barcode} - {slot_display}"
                )
                
                # Scraping yap
                success = scrape_single_link(barcode, slot_number, url, username)
                
                if success:
                    success_count += 1
                    if slot_number == 0:
                        slot_0_count += 1
                        update_scraping_status(slot_0_processed=slot_0_count)
                    else:
                        competitor_count += 1
                        update_scraping_status(competitor_processed=competitor_count)
                else:
                    error_msg = f"Scraping hatasƒ±: {barcode} - {slot_display}"
                    update_scraping_status(error=error_msg)
                
                # Slot 0 i√ßin daha uzun bekleme
                if slot_number == 0:
                    time.sleep(random.uniform(NESELICICEKLER_DELAY_MIN, NESELICICEKLER_DELAY_MAX))
                else:
                    time.sleep(random.uniform(REQUEST_DELAY_MIN, REQUEST_DELAY_MAX))
            
            stats_info = f"{success_count}/{total_links} ba≈üarƒ±lƒ±"
            if include_slot_0:
                stats_info += f" (Ne≈üeli√ái√ßekler: {slot_0_count}, Rakipler: {competitor_count})"
            
            logging.info(f"Manuel g√ºncelleme tamamlandƒ±: {stats_info}")
            
        except Exception as e:
            error_msg = f"Manuel g√ºncelleme hatasƒ±: {str(e)}"
            logging.error(error_msg)
            update_scraping_status(error=error_msg)
        finally:
            update_scraping_status(is_running=False, current_item="")
    
    # Eƒüer ba≈üka bir scraping devam ediyorsa ba≈ülatma
    if scraping_status['is_running']:
        logging.warning("Scraping zaten devam ediyor, yeni i≈ülem ba≈ülatƒ±lmadƒ±")
        return False
    
    # Arka planda √ßalƒ±≈ütƒ±r
    thread = threading.Thread(target=manual_update_worker)
    thread.daemon = True
    thread.start()
    
    return True

def start_scheduled_update(username: str = "scheduler", include_slot_0: bool = True):
    """
    Zamanlanmƒ±≈ü g√ºncelleme ba≈ülatƒ±r
    YENƒ∞: include_slot_0 parametresi eklendi
    """
    def scheduled_update_worker():
        try:
            update_scraping_status(is_running=True, started_by=username, include_slot_0=include_slot_0)
            
            # T√ºm aktif linkleri al
            all_links = get_all_active_links(include_slot_0=include_slot_0)
            total_links = len(all_links)
            
            update_scraping_status(total=total_links, progress=0)
            
            slot_info = "Slot 0-5" if include_slot_0 else "Slot 1-5"
            logging.info(f"Otomatik g√ºncelleme ba≈ülatƒ±ldƒ±: {total_links} link ({slot_info})")
            
            success_count = 0
            slot_0_count = 0
            competitor_count = 0
            
            for i, link_data in enumerate(all_links):
                barcode = link_data['barcode']
                slot_number = link_data['slot_number']
                url = link_data['url']
                
                # Durumu g√ºncelle
                slot_display = "Ne≈üeli√ái√ßekler" if slot_number == 0 else f"Rakip Slot {slot_number}"
                update_scraping_status(
                    progress=i + 1,
                    current_item=f"{barcode} - {slot_display}"
                )
                
                # Scraping yap
                success = scrape_single_link(barcode, slot_number, url, username)
                
                if success:
                    success_count += 1
                    if slot_number == 0:
                        slot_0_count += 1
                        update_scraping_status(slot_0_processed=slot_0_count)
                    else:
                        competitor_count += 1
                        update_scraping_status(competitor_processed=competitor_count)
                else:
                    error_msg = f"Otomatik scraping hatasƒ±: {barcode} - {slot_display}"
                    update_scraping_status(error=error_msg)
                
                # Otomatik g√ºncellemede daha uzun bekleme - Slot 0 i√ßin extra uzun
                if slot_number == 0:
                    time.sleep(random.uniform(NESELICICEKLER_DELAY_MIN + 2, NESELICICEKLER_DELAY_MAX + 3))
                else:
                    time.sleep(random.uniform(REQUEST_DELAY_MIN + 1, REQUEST_DELAY_MAX + 2))
            
            stats_info = f"{success_count}/{total_links} ba≈üarƒ±lƒ±"
            if include_slot_0:
                stats_info += f" (Ne≈üeli√ái√ßekler: {slot_0_count}, Rakipler: {competitor_count})"
            
            logging.info(f"Otomatik g√ºncelleme tamamlandƒ±: {stats_info}")
            
        except Exception as e:
            error_msg = f"Otomatik g√ºncelleme hatasƒ±: {str(e)}"
            logging.error(error_msg)
            update_scraping_status(error=error_msg)
        finally:
            update_scraping_status(is_running=False, current_item="")
    
    # Eƒüer ba≈üka bir scraping devam ediyorsa ba≈ülatma
    if scraping_status['is_running']:
        logging.warning("Scraping zaten devam ediyor, otomatik i≈ülem atlandƒ±")
        return False
    
    # Arka planda √ßalƒ±≈ütƒ±r
    thread = threading.Thread(target=scheduled_update_worker)
    thread.daemon = True
    thread.start()
    
    return True

def is_scraping_running() -> bool:
    """Scraping i≈üleminin devam edip etmediƒüini kontrol eder"""
    return scraping_status['is_running']

# YENƒ∞ FONKSƒ∞YONLAR: Ne≈üeli√ái√ßekler √∂zel i≈ülemleri

def start_neselicicekler_only_update(username: str):
    """
    Sadece Ne≈üeli√ái√ßekler (slot 0) linklerini g√ºnceller
    """
    def neseli_update_worker():
        try:
            update_scraping_status(is_running=True, started_by=username, include_slot_0=True)
            
            # Sadece slot 0 linklerini al
            from competitor_tracking import get_all_active_links_by_slot
            neseli_links = get_all_active_links_by_slot(0)
            total_links = len(neseli_links)
            
            update_scraping_status(total=total_links, progress=0)
            
            logging.info(f"Ne≈üeli√ái√ßekler g√ºncelleme ba≈ülatƒ±ldƒ±: {total_links} link")
            
            success_count = 0
            
            for i, link_data in enumerate(neseli_links):
                barcode = link_data['barcode']
                url = link_data['url']
                
                # Durumu g√ºncelle
                update_scraping_status(
                    progress=i + 1,
                    current_item=f"{barcode} - Ne≈üeli√ái√ßekler"
                )
                
                # Scraping yap
                success = scrape_single_link(barcode, 0, url, username)
                
                if success:
                    success_count += 1
                    update_scraping_status(slot_0_processed=success_count)
                else:
                    error_msg = f"Ne≈üeli√ái√ßekler scraping hatasƒ±: {barcode}"
                    update_scraping_status(error=error_msg)
                
                # Uzun bekleme
                time.sleep(random.uniform(NESELICICEKLER_DELAY_MIN, NESELICICEKLER_DELAY_MAX))
            
            logging.info(f"Ne≈üeli√ái√ßekler g√ºncelleme tamamlandƒ±: {success_count}/{total_links} ba≈üarƒ±lƒ±")
            
        except Exception as e:
            error_msg = f"Ne≈üeli√ái√ßekler g√ºncelleme hatasƒ±: {str(e)}"
            logging.error(error_msg)
            update_scraping_status(error=error_msg)
        finally:
            update_scraping_status(is_running=False, current_item="")
    
    # Eƒüer ba≈üka bir scraping devam ediyorsa ba≈ülatma
    if scraping_status['is_running']:
        logging.warning("Scraping zaten devam ediyor, Ne≈üeli√ái√ßekler i≈ülem ba≈ülatƒ±lmadƒ±")
        return False
    
    # Arka planda √ßalƒ±≈ütƒ±r
    thread = threading.Thread(target=neseli_update_worker)
    thread.daemon = True
    thread.start()
    
    return True

def get_scraping_statistics() -> Dict:
    """
    Scraping istatistiklerini getirir
    """
    try:
        from competitor_tracking import get_neselicicekler_price_stats, get_total_prices_count
        
        stats = {
            'neselicicekler': get_neselicicekler_price_stats(),
            'competitor_total': get_total_prices_count(include_slot_0=False),
            'all_total': get_total_prices_count(include_slot_0=True),
            'scraping_status': get_update_status()
        }
        
        return stats
        
    except Exception as e:
        logging.error(f"ƒ∞statistik getirme hatasƒ±: {str(e)}")
        return {}